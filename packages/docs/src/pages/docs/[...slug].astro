---
import Layout from "../../layouts/DocsLayout.astro";
import SideBar from "./SideBar.astro";
import Toc from "./Toc.astro";
import { getCollection } from "astro:content";

export const prerender = true;

export async function getStaticPaths() {
  const docsEntries = await getCollection("docs");

  function resolveSlug(slug: string) {
    const segments = slug.split("/");
    const cleanedSegments = segments.map((segment) =>
      segment.replace(/^\d+\.?/, ""),
    );
    return cleanedSegments.join("/");
  }

  const paths = docsEntries.map((entry) => ({
    params: { slug: resolveSlug(entry.slug) },
    props: { entry: {
      ...entry,
      slug: resolveSlug(entry.slug),
    } },
  }));
  return paths;
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();
const docsEntries = await getCollection("docs");

// Sort docsEntries by nav_group_order and nav_order
const sortedEntries = docsEntries.sort((a, b) => a.slug.localeCompare(b.slug));
// Find the index of the current entry
const currentIndex = sortedEntries.findIndex((it) => it.slug === entry.slug);

// Find the previous and next entry
const prevEntry = currentIndex > 0 ? sortedEntries[currentIndex - 1] : null;
const nextEntry =
  currentIndex < sortedEntries.length - 1
    ? sortedEntries[currentIndex + 1]
    : null;
---

<Layout
  title={`${entry.data.nav_group}/${entry.data.title}`}
  description={entry.data.description}
  image={entry.data.image}
>
  <div class="relative mx-auto flex flex-col lg:flex-row p-4 lg:p-8 gap-4">
    <div class="lg:sticky lg:top-0 lg:h-fit order-2 lg:order-1">
      <div class="glass lg:min-w-[250px]">
        <SideBar />
      </div>
    </div>
    <div
      class="glass prose prose-modern w-full max-w-full px-4 lg:px-8 h-fit order-1 lg:order-2"
    >
      <Content />
    </div>
    <div class="lg:sticky lg:top-0 lg:h-fit order-3">
      <div class="glass">
        <Toc headings={headings} />
      </div>
    </div>
  </div>
</Layout>

<style>
  main {
  }
</style>

<style is:global>
  .move {
    width: 200px;
    height: 80px;
    border: white solid 1px;
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }
  .move.disabled {
    display: none;
  }
</style>

<style>
  @media (max-width: 1024px) {
    :global(.toc-container) {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      z-index: 50;
      max-height: 80vh;
      overflow-y: auto;
      transform: translateX(100%);
      transition: transform 0.3s ease-in-out;
    }
    
    :global(.toc-container.show) {
      transform: translateX(0);
    }
  }
</style>
