---
import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;
---

<div class="toc-container">
  <button
    id="toc-toggle"
    class="lg:hidden fixed bottom-4 right-4 z-50 p-2 rounded-full bg-white shadow-lg"
    aria-label="Toggle Table of Contents"
  >
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <line x1="3" y1="12" x2="21" y2="12"></line>
      <line x1="3" y1="6" x2="21" y2="6"></line>
      <line x1="3" y1="18" x2="21" y2="18"></line>
    </svg>
  </button>
  
  <nav class="toc w-[300px] lg:w-[250px] shrink-0 grow-0 justify-start px-4 py-4 lg:py-20">
    <ul class="flex list-none w-full flex-col gap-1 py-4">
      <li style={`padding-left: ${headings[0].depth * 16}px;`}>
        <a class="text-gray-600 hover:text-gray-900" href={`#${headings[0].slug}`}>Overview</a>
      </li>
      {
        headings.slice(1).map((heading) => (
          <li style={`padding-left: ${(heading.depth - 1) * 16}px;`}>
            <a href={`#${heading.slug}`} class="text-gray-600 hover:text-gray-900">
              {heading.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<script>
  const tocToggle = document.getElementById('toc-toggle');
  const tocContainer = document.querySelector('.toc-container');
  
  tocToggle?.addEventListener('click', () => {
    tocContainer?.classList.toggle('show');
  });

  // Close TOC when clicking a link on mobile
  const tocLinks = document.querySelectorAll('.toc a');
  tocLinks.forEach(link => {
    link.addEventListener('click', () => {
      if (window.innerWidth < 1024) {
        tocContainer?.classList.remove('show');
      }
    });
  });

  const content = document.querySelector(".layout")!;
  const headings = document.querySelectorAll("h1, h2, h3, h4, h5, h6") as NodeListOf<HTMLElement>;
  const toc = document.querySelector(".toc")!;
  const tocLinkElements = toc.querySelectorAll("a");
  const contentOffsetTop = content.getBoundingClientRect().top;
  
  const headerLinks = Array.from(headings).map((heading) => {
    return {
      id: heading.id,
      top: heading.offsetTop - contentOffsetTop,
      bottom: heading.offsetTop + heading.offsetHeight - contentOffsetTop,
    };
  });

  const onScroll = () => {
    const scrollY = content.scrollTop;
    const offset = -81;
    const activeHeaderLink = headerLinks.findLast((headerLink) => {
      return headerLink.top + offset <= scrollY;
    });
    
    tocLinkElements.forEach((tocLink) => {
      tocLink.classList.remove("active");
    });
    
    if (activeHeaderLink) {
      const activeTocLink = toc.querySelector(
        `a[href="#${activeHeaderLink.id}"]`,
      );
      activeTocLink?.classList.add("active");
    }
  };

  content.addEventListener("scroll", onScroll);
  onScroll();
</script>

<style>
  .active {
    font-weight: bold;
  }

  @media (min-width: 1024px) {
    nav {
      height: calc(100vh - var(--header));
    }
  }

  #toc-toggle {
    background: white;
    border: 1px solid #e5e5e5;
  }

  #toc-toggle:hover {
    background: #f5f5f5;
  }
</style>
